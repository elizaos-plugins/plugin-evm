{"version":3,"sources":["../src/actions/bridge.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/types/index.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Memory, State, HandlerCallback } from \"@elizaos/core\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport {\n    createConfig,\n    executeRoute,\n    type ExtendedChain,\n    getRoutes,\n} from \"@lifi/sdk\";\n\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport type { BridgeParams, Transaction } from \"../types\";\nimport { parseEther } from \"viem\";\n\nexport { bridgeTemplate };\n\nexport class BridgeAction {\n    private config;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.config = createConfig({\n            integrator: \"eliza\",\n            chains: Object.values(this.walletProvider.chains).map((config) => ({\n                id: config.id,\n                name: config.name,\n                key: config.name.toLowerCase(),\n                chainType: \"EVM\",\n                nativeToken: {\n                    ...config.nativeCurrency,\n                    chainId: config.id,\n                    address: \"0x0000000000000000000000000000000000000000\",\n                    coinKey: config.nativeCurrency.symbol,\n                },\n                metamask: {\n                    chainId: `0x${config.id.toString(16)}`,\n                    chainName: config.name,\n                    nativeCurrency: config.nativeCurrency,\n                    rpcUrls: [config.rpcUrls.default.http[0]],\n                    blockExplorerUrls: [config.blockExplorers.default.url],\n                },\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\n                coin: config.nativeCurrency.symbol,\n                mainnet: true,\n            })) as ExtendedChain[],\n        });\n    }\n\n    async bridge(params: BridgeParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n        const [fromAddress] = await walletClient.getAddresses();\n\n        const routes = await getRoutes({\n            fromChainId: this.walletProvider.getChainConfigs(params.fromChain)\n                .id,\n            toChainId: this.walletProvider.getChainConfigs(params.toChain).id,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: parseEther(params.amount).toString(),\n            fromAddress: fromAddress,\n            toAddress: params.toAddress || fromAddress,\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0], this.config);\n        const process = execution.steps[0]?.execution?.process[0];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        return {\n            hash: process.txHash as `0x${string}`,\n            from: fromAddress,\n            to: routes.routes[0].steps[0].estimate\n                .approvalAddress as `0x${string}`,\n            value: BigInt(params.amount),\n            chainId: this.walletProvider.getChainConfigs(params.fromChain).id,\n        };\n    }\n}\n\nexport const bridgeAction = {\n    name: \"bridge\",\n    description: \"Bridge tokens between different chains\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Bridge action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new BridgeAction(walletProvider);\n\n        // Compose bridge context\n        const bridgeContext = composeContext({\n            state,\n            template: bridgeTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: bridgeContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const bridgeOptions: BridgeParams = {\n            fromChain: content.fromChain,\n            toChain: content.toChain,\n            fromToken: content.token,\n            toToken: content.token,\n            toAddress: content.toAddress,\n            amount: content.amount,\n        };\n\n        try {\n            const bridgeResp = await action.bridge(bridgeOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully bridge ${bridgeOptions.amount} ${bridgeOptions.fromToken} tokens from ${bridgeOptions.fromChain} to ${bridgeOptions.toChain}\\nTransaction Hash: ${bridgeResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: bridgeResp.hash,\n                        recipient: bridgeResp.to,\n                        chain: bridgeOptions.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in bridge handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: bridgeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Bridge 1 ETH from Ethereum to Base\",\n                    action: \"CROSS_CHAIN_TRANSFER\",\n                },\n            },\n        ],\n    ],\n    similes: [\"CROSS_CHAIN_TRANSFER\", \"CHAIN_BRIDGE\", \"MOVE_CROSS_CHAIN\"],\n}; // TODO: add more examples / similies\n","import {\n    createPublicClient,\n    createTestClient,\n    createWalletClient,\n    formatUnits,\n    http,\n    publicActions,\n    walletActions,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport {\n    type IAgentRuntime,\n    type Provider,\n    type Memory,\n    type State,\n    type ICacheManager,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    TestClient,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\nimport { DeriveKeyProvider, TEEMode } from \"@elizaos/plugin-tee\";\nimport NodeCache from \"node-cache\";\nimport * as path from \"node:path\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private cache: NodeCache;\n    private cacheKey = \"evm/wallet\";\n    private currentChain: SupportedChain = \"mainnet\";\n    private CACHE_EXPIRY_SEC = 5;\n    chains: Record<string, Chain> = { ...viemChains };\n    account: PrivateKeyAccount;\n\n    constructor(\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`,\n        private cacheManager: ICacheManager,\n        chains?: Record<string, Chain>\n    ) {\n        this.setAccount(accountOrPrivateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n\n        this.cache = new NodeCache({ stdTTL: this.CACHE_EXPIRY_SEC });\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getTestClient(): TestClient {\n        return createTestClient({\n            chain: viemChains.hardhat,\n            mode: \"hardhat\",\n            transport: http(),\n        })\n            .extend(publicActions)\n            .extend(walletActions);\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        const cacheKey = `walletBalance_${this.currentChain}`;\n        const cachedData = await this.getCachedData<string>(cacheKey);\n        if (cachedData) {\n            elizaLogger.log(\n                `Returning cached wallet balance for chain: ${this.currentChain}`\n            );\n            return cachedData;\n        }\n\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            const balanceFormatted = formatUnits(balance, 18);\n            this.setCachedData<string>(cacheKey, balanceFormatted);\n            elizaLogger.log(\n                \"Wallet balance cached for chain: \",\n                this.currentChain\n            );\n            return balanceFormatted;\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async getWalletBalanceForChain(\n        chainName: SupportedChain\n    ): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(chainName);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key)\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + this.CACHE_EXPIRY_SEC * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private setAccount = (\n        accountOrPrivateKey: PrivateKeyAccount | `0x${string}`\n    ) => {\n        if (typeof accountOrPrivateKey === \"string\") {\n            this.account = privateKeyToAccount(accountOrPrivateKey);\n        } else {\n            this.account = accountOrPrivateKey;\n        }\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames =\n        (runtime.character.settings.chains?.evm as SupportedChain[]) || [];\n    const chains: Record<string, Chain> = {};\n\n    for (const chainName of chainNames) {\n        const rpcUrl = runtime.getSetting(\n            `ETHEREUM_PROVIDER_${chainName.toUpperCase()}`\n        );\n        const chain = WalletProvider.genChainFromName(chainName, rpcUrl);\n        chains[chainName] = chain;\n    }\n\n    const mainnet_rpcurl = runtime.getSetting(\"EVM_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\n            \"mainnet\",\n            mainnet_rpcurl\n        );\n        chains[\"mainnet\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = async (runtime: IAgentRuntime) => {\n    const teeMode = runtime.getSetting(\"TEE_MODE\") || TEEMode.OFF;\n\n    const chains = genChainsFromRuntime(runtime);\n\n    if (teeMode !== TEEMode.OFF) {\n        const walletSecretSalt = runtime.getSetting(\"WALLET_SECRET_SALT\");\n        if (!walletSecretSalt) {\n            throw new Error(\n                \"WALLET_SECRET_SALT required when TEE_MODE is enabled\"\n            );\n        }\n\n        const deriveKeyProvider = new DeriveKeyProvider(teeMode);\n        const deriveKeyResult = await deriveKeyProvider.deriveEcdsaKeypair(\n            walletSecretSalt,\n            \"evm\",\n            runtime.agentId\n        );\n        return new WalletProvider(\n            deriveKeyResult.keypair,\n            runtime.cacheManager,\n            chains\n        );\n    } else {\n        const privateKey = runtime.getSetting(\n            \"EVM_PRIVATE_KEY\"\n        ) as `0x${string}`;\n        if (!privateKey) {\n            throw new Error(\"EVM_PRIVATE_KEY is missing\");\n        }\n        return new WalletProvider(privateKey, runtime.cacheManager, chains);\n    }\n};\n\nexport const evmWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = await initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            const chain = walletProvider.getCurrentChain();\n            const agentName = state?.agentName || \"The agent\";\n            return `${agentName}'s EVM Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in EVM wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const transferTemplate = `You are an AI assistant specialized in processing cryptocurrency transfer requests. Your task is to extract specific information from user messages and format it into a structured JSON response.\n\nFirst, review the recent messages from the conversation:\n\n<recent_messages>\n{{recentMessages}}\n</recent_messages>\n\nHere's a list of supported chains:\n<supported_chains>\n{{supportedChains}}\n</supported_chains>\n\nYour goal is to extract the following information about the requested transfer:\n1. Chain to execute on (must be one of the supported chains)\n2. Amount to transfer (in ETH, without the coin symbol)\n3. Recipient address (must be a valid Ethereum address)\n4. Token symbol or address (if not a native token transfer)\n\nBefore providing the final JSON output, show your reasoning process inside <analysis> tags. Follow these steps:\n\n1. Identify the relevant information from the user's message:\n   - Quote the part of the message mentioning the chain.\n   - Quote the part mentioning the amount.\n   - Quote the part mentioning the recipient address.\n   - Quote the part mentioning the token (if any).\n\n2. Validate each piece of information:\n   - Chain: List all supported chains and check if the mentioned chain is in the list.\n   - Amount: Attempt to convert the amount to a number to verify it's valid.\n   - Address: Check that it starts with \"0x\" and count the number of characters (should be 42).\n   - Token: Note whether it's a native transfer or if a specific token is mentioned.\n\n3. If any information is missing or invalid, prepare an appropriate error message.\n\n4. If all information is valid, summarize your findings.\n\n5. Prepare the JSON structure based on your analysis.\n\nAfter your analysis, provide the final output in a JSON markdown block. All fields except 'token' are required. The JSON should have this structure:\n\n\\`\\`\\`json\n{\n    \"fromChain\": string,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n\nRemember:\n- The chain name must be a string and must exactly match one of the supported chains.\n- The amount should be a string representing the number without any currency symbol.\n- The recipient address must be a valid Ethereum address starting with \"0x\".\n- If no specific token is mentioned (i.e., it's a native token transfer), set the \"token\" field to null.\n\nNow, process the user's request and provide your response.\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- Token symbol or address to bridge\n- Source chain\n- Destination chain\n- Amount to bridge: Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\")\n- Destination address (if specified)\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"fromChain\": \"ethereum\" | \"abstract\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"fraxtal\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | \"alienx\" | \"gravity\" | null,\n    \"toChain\": \"ethereum\" | \"abstract\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"fraxtal\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | \"alienx\" | \"gravity\" |  null,\n    \"amount\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol or address (the token being sold)\n- Output token symbol or address (the token being bought)\n- Amount to swap: Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\")\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"chain\": \"ethereum\" | \"abstract\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | \"alienx\" | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const proposeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested proposal:\n- Targets\n- Values\n- Calldatas\n- Description\n- Governor address\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"targets\": string[] | null,\n    \"values\": string[] | null,\n    \"calldatas\": string[] | null,\n    \"description\": string | null,\n    \"governor\": string | null\n    \"chain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n}\n\\`\\`\\`\n`;\n\nexport const voteTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested vote:\n- Proposal ID\n- Support (1 for yes, 2 for no, 3 for abstain)\n- Governor address\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"proposalId\": string | null,\n    \"support\": number | null,\n    \"governor\": string | null\n    \"chain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n}\n\\`\\`\\`\n`;\n\nexport const queueProposalTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested proposal:\n- Targets\n- Values\n- Calldatas\n- Description\n- Governor address\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"targets\": string[] | null,\n    \"values\": string[] | null,\n    \"calldatas\": string[] | null,\n    \"description\": string | null,\n    \"governor\": string | null\n    \"chain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n}\n\\`\\`\\`\n`;\n\nexport const executeProposalTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested proposal:\n- Targets\n- Values\n- Calldatas\n- Description\n- Governor address\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"targets\": string[] | null,\n    \"values\": string[] | null,\n    \"calldatas\": string[] | null,\n    \"description\": string | null,\n    \"governor\": string | null\n    \"chain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n}\n\\`\\`\\`\n`;\n","import type { IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport {\n    createConfig,\n    executeRoute,\n    type ExtendedChain,\n    getRoutes,\n    type Route,\n} from \"@lifi/sdk\";\n\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapQuote, Transaction } from \"../types\";\nimport {\n    type Address,\n    type ByteArray,\n    encodeFunctionData,\n    type Hex,\n    parseAbi,\n    parseUnits,\n} from \"viem\";\nimport type { BebopRoute } from \"../types/index\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    private lifiConfig;\n    private bebopChainsMap;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.walletProvider = walletProvider;\n        const lifiChains: ExtendedChain[] = [];\n        for (const config of Object.values(this.walletProvider.chains)) {\n            try {\n                lifiChains.push({\n                    id: config.id,\n                    name: config.name,\n                    key: config.name.toLowerCase(),\n                    chainType: \"EVM\" as const,\n                    nativeToken: {\n                        ...config.nativeCurrency,\n                        chainId: config.id,\n                        address: \"0x0000000000000000000000000000000000000000\",\n                        coinKey: config.nativeCurrency.symbol,\n                        priceUSD: \"0\",\n                        logoURI: \"\",\n                        symbol: config.nativeCurrency.symbol,\n                        decimals: config.nativeCurrency.decimals,\n                        name: config.nativeCurrency.name,\n                    },\n                    rpcUrls: {\n                        public: { http: [config.rpcUrls.default.http[0]] },\n                    },\n                    blockExplorerUrls: [config.blockExplorers.default.url],\n                    metamask: {\n                        chainId: `0x${config.id.toString(16)}`,\n                        chainName: config.name,\n                        nativeCurrency: config.nativeCurrency,\n                        rpcUrls: [config.rpcUrls.default.http[0]],\n                        blockExplorerUrls: [config.blockExplorers.default.url],\n                    },\n                    coin: config.nativeCurrency.symbol,\n                    mainnet: true,\n                    diamondAddress:\n                        \"0x0000000000000000000000000000000000000000\",\n                } as ExtendedChain);\n            } catch {\n                // Skip chains with missing config in viem\n            }\n        }\n        this.lifiConfig = createConfig({\n            integrator: \"eliza\",\n            chains: lifiChains,\n        });\n        this.bebopChainsMap = {\n            mainnet: \"ethereum\",\n        };\n    }\n\n    async swap(params: SwapParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient(params.chain);\n        const [fromAddress] = await walletClient.getAddresses();\n\n        // Getting quotes from different aggregators and sorting them by minAmount (amount after slippage)\n        const sortedQuotes: SwapQuote[] = await this.getSortedQuotes(\n            fromAddress,\n            params\n        );\n\n        // Trying to execute the best quote by amount, fallback to the next one if it fails\n        for (const quote of sortedQuotes) {\n            let res;\n            switch (quote.aggregator) {\n                case \"lifi\":\n                    res = await this.executeLifiQuote(quote);\n                    break;\n                case \"bebop\":\n                    res = await this.executeBebopQuote(quote, params);\n                    break;\n                default:\n                    throw new Error(\"No aggregator found\");\n            }\n            if (res !== undefined) return res;\n        }\n        throw new Error(\"Execution failed\");\n    }\n\n    private async getSortedQuotes(\n        fromAddress: Address,\n        params: SwapParams\n    ): Promise<SwapQuote[]> {\n        const decimalsAbi = parseAbi([\n            \"function decimals() view returns (uint8)\",\n        ]);\n        const decimals = await this.walletProvider\n            .getPublicClient(params.chain)\n            .readContract({\n                address: params.fromToken,\n                abi: decimalsAbi,\n                functionName: \"decimals\",\n            });\n        const quotes: SwapQuote[] | undefined = await Promise.all([\n            this.getLifiQuote(fromAddress, params, decimals),\n            this.getBebopQuote(fromAddress, params, decimals),\n        ]);\n        const sortedQuotes: SwapQuote[] = quotes.filter(\n            (quote) => quote !== undefined\n        ) as SwapQuote[];\n        sortedQuotes.sort((a, b) =>\n            BigInt(a.minOutputAmount) > BigInt(b.minOutputAmount) ? -1 : 1\n        );\n        if (sortedQuotes.length === 0) throw new Error(\"No routes found\");\n        return sortedQuotes;\n    }\n\n    private async getLifiQuote(\n        fromAddress: Address,\n        params: SwapParams,\n        fromTokenDecimals: number\n    ): Promise<SwapQuote | undefined> {\n        try {\n            const routes = await getRoutes({\n                fromChainId: this.walletProvider.getChainConfigs(params.chain)\n                    .id,\n                toChainId: this.walletProvider.getChainConfigs(params.chain).id,\n                fromTokenAddress: params.fromToken,\n                toTokenAddress: params.toToken,\n                fromAmount: parseUnits(\n                    params.amount,\n                    fromTokenDecimals\n                ).toString(),\n                fromAddress: fromAddress,\n                options: {\n                    slippage: params.slippage / 100 || 0.005,\n                    order: \"RECOMMENDED\",\n                },\n            });\n            if (!routes.routes.length) throw new Error(\"No routes found\");\n            return {\n                aggregator: \"lifi\",\n                minOutputAmount: routes.routes[0].steps[0].estimate.toAmountMin,\n                swapData: routes.routes[0],\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in getLifiQuote:\", error.message);\n            return undefined;\n        }\n    }\n\n    private async getBebopQuote(\n        fromAddress: Address,\n        params: SwapParams,\n        fromTokenDecimals: number\n    ): Promise<SwapQuote | undefined> {\n        try {\n            const url = `https://api.bebop.xyz/router/${this.bebopChainsMap[params.chain] ?? params.chain}/v1/quote`;\n            const reqParams = new URLSearchParams({\n                sell_tokens: params.fromToken,\n                buy_tokens: params.toToken,\n                sell_amounts: parseUnits(\n                    params.amount,\n                    fromTokenDecimals\n                ).toString(),\n                taker_address: fromAddress,\n                approval_type: \"Standard\",\n                skip_validation: \"true\",\n                gasless: \"false\",\n                source: \"eliza\",\n            });\n            const response = await fetch(`${url}?${reqParams.toString()}`, {\n                method: \"GET\",\n                headers: { accept: \"application/json\" },\n            });\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            const data = await response.json();\n            const route: BebopRoute = {\n                data: data.routes[0].quote.tx.data,\n                sellAmount: parseUnits(\n                    params.amount,\n                    fromTokenDecimals\n                ).toString(),\n                approvalTarget: data.routes[0].quote\n                    .approvalTarget as `0x${string}`,\n                from: data.routes[0].quote.tx.from as `0x${string}`,\n                value: data.routes[0].quote.tx.value.toString(),\n                to: data.routes[0].quote.tx.to as `0x${string}`,\n                gas: data.routes[0].quote.tx.gas.toString(),\n                gasPrice: data.routes[0].quote.tx.gasPrice.toString(),\n            };\n            return {\n                aggregator: \"bebop\",\n                minOutputAmount:\n                    data.routes[0].quote.buyTokens[\n                        params.toToken\n                    ].minimumAmount.toString(),\n                swapData: route,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in getBebopQuote:\", error.message);\n            return undefined;\n        }\n    }\n\n    private async executeLifiQuote(\n        quote: SwapQuote\n    ): Promise<Transaction | undefined> {\n        try {\n            const route: Route = quote.swapData as Route;\n            const execution = await executeRoute(\n                quote.swapData as Route,\n                this.lifiConfig\n            );\n            const process = execution.steps[0]?.execution?.process[0];\n\n            if (!process?.status || process.status === \"FAILED\") {\n                throw new Error(\"Transaction failed\");\n            }\n            return {\n                hash: process.txHash as `0x${string}`,\n                from: route.fromAddress! as `0x${string}`,\n                to: route.steps[0].estimate.approvalAddress as `0x${string}`,\n                value: 0n,\n                data: process.data as `0x${string}`,\n                chainId: route.fromChainId,\n            };\n        } catch (error) {\n            elizaLogger.error(`Failed to execute lifi quote: ${error}`);\n            return undefined;\n        }\n    }\n\n    private async executeBebopQuote(\n        quote: SwapQuote,\n        params: SwapParams\n    ): Promise<Transaction | undefined> {\n        try {\n            const bebopRoute: BebopRoute = quote.swapData as BebopRoute;\n            const allowanceAbi = parseAbi([\n                \"function allowance(address,address) view returns (uint256)\",\n            ]);\n            const allowance: bigint = await this.walletProvider\n                .getPublicClient(params.chain)\n                .readContract({\n                    address: params.fromToken,\n                    abi: allowanceAbi,\n                    functionName: \"allowance\",\n                    args: [bebopRoute.from, bebopRoute.approvalTarget],\n                });\n            if (allowance < BigInt(bebopRoute.sellAmount)) {\n                const approvalData = encodeFunctionData({\n                    abi: parseAbi([\"function approve(address,uint256)\"]),\n                    functionName: \"approve\",\n                    args: [\n                        bebopRoute.approvalTarget,\n                        BigInt(bebopRoute.sellAmount),\n                    ],\n                });\n                await this.walletProvider\n                    .getWalletClient(params.chain)\n                    .sendTransaction({\n                        account: this.walletProvider.getWalletClient(\n                            params.chain\n                        ).account,\n                        to: params.fromToken,\n                        value: 0n,\n                        data: approvalData,\n                        kzg: {\n                            blobToKzgCommitment: (\n                                _: ByteArray\n                            ): ByteArray => {\n                                throw new Error(\"Function not implemented.\");\n                            },\n                            computeBlobKzgProof: (\n                                _blob: ByteArray,\n                                _commitment: ByteArray\n                            ): ByteArray => {\n                                throw new Error(\"Function not implemented.\");\n                            },\n                        },\n                        chain: undefined,\n                    });\n            }\n            const hash = await this.walletProvider\n                .getWalletClient(params.chain)\n                .sendTransaction({\n                    account: this.walletProvider.getWalletClient(params.chain)\n                        .account,\n                    to: bebopRoute.to,\n                    value: BigInt(bebopRoute.value),\n                    data: bebopRoute.data as Hex,\n                    kzg: {\n                        blobToKzgCommitment: (\n                            _: ByteArray\n                        ): ByteArray => {\n                            throw new Error(\"Function not implemented.\");\n                        },\n                        computeBlobKzgProof: (\n                            _blob: ByteArray,\n                            _commitment: ByteArray\n                        ): ByteArray => {\n                            throw new Error(\"Function not implemented.\");\n                        },\n                    },\n                    chain: undefined,\n                });\n            return {\n                hash,\n                from: this.walletProvider.getWalletClient(params.chain).account\n                    .address,\n                to: bebopRoute.to,\n                value: BigInt(bebopRoute.value),\n                data: bebopRoute.data as Hex,\n            };\n        } catch (error) {\n            elizaLogger.error(`Failed to execute bebop quote: ${error}`);\n            return undefined;\n        }\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: any,\n        callback?: any\n    ) => {\n        elizaLogger.log(\"Swap action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new SwapAction(walletProvider);\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const swapOptions: SwapParams = {\n            chain: content.chain,\n            fromToken: content.inputToken,\n            toToken: content.outputToken,\n            amount: content.amount,\n            slippage: content.slippage,\n        };\n\n        try {\n            const swapResp = await action.swap(swapOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully swap ${swapOptions.amount} ${swapOptions.fromToken} tokens to ${swapOptions.toToken}\\nTransaction Hash: ${swapResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: swapResp.hash,\n                        recipient: swapResp.to,\n                        chain: content.chain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in swap handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on Base\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n        ],\n    ],\n    similes: [\"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n}; // TODO: add more examples\n","import { type ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    type Action,\n    composeContext,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { initWalletProvider, type WalletProvider } from \"../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../types\";\nimport { transferTemplate } from \"../templates\";\n\n// Exported for tests\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        console.log(\n            `Transferring: ${params.amount} tokens to (${params.toAddress} on ${params.fromChain})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        this.walletProvider.switchChain(params.fromChain);\n\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: (_: ByteArray): ByteArray => {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: (\n                        _blob: ByteArray,\n                        _commitment: ByteArray\n                    ): ByteArray => {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const chains = Object.keys(wp.chains);\n    state.supportedChains = chains.map((item) => `\"${item}\"`).join(\"|\");\n\n    const context = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[transferDetails.fromChain];\n\n    if (!existingChain) {\n        throw new Error(\n            \"The chain \" +\n                transferDetails.fromChain +\n                \" not configured yet. Add the chain or choose one from configured: \" +\n                chains.toString()\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const transferAction: Action = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback?: HandlerCallback\n    ) => {\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        console.log(\"Transfer action handler called\");\n        const walletProvider = await initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n\n        // Compose transfer context\n        const paramOptions = await buildTransferDetails(\n            state,\n            runtime,\n            walletProvider\n        );\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: paramOptions.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import type { Route, Token } from \"@lifi/types\";\nimport type {\n    Account,\n    Address,\n    Chain,\n    Hash,\n    HttpTransport,\n    PublicClient,\n    WalletClient,\n    Log,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\n\nconst _SupportedChainList = Object.keys(viemChains) as Array<\n    keyof typeof viemChains\n>;\nexport type SupportedChain = (typeof _SupportedChainList)[number];\n\n// Transaction types\nexport interface Transaction {\n    hash: Hash;\n    from: Address;\n    to: Address;\n    value: bigint;\n    data?: `0x${string}`;\n    chainId?: number;\n    logs?: Log[];\n}\n\n// Token types\nexport interface TokenWithBalance {\n    token: Token;\n    balance: bigint;\n    formattedBalance: string;\n    priceUSD: string;\n    valueUSD: string;\n}\n\nexport interface WalletBalance {\n    chain: SupportedChain;\n    address: Address;\n    totalValueUSD: string;\n    tokens: TokenWithBalance[];\n}\n\n// Chain configuration\nexport interface ChainMetadata {\n    chainId: number;\n    name: string;\n    chain: Chain;\n    rpcUrl: string;\n    nativeCurrency: {\n        name: string;\n        symbol: string;\n        decimals: number;\n    };\n    blockExplorerUrl: string;\n}\n\nexport interface ChainConfig {\n    chain: Chain;\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\n    walletClient?: WalletClient;\n}\n\n// Action parameters\nexport interface TransferParams {\n    fromChain: SupportedChain;\n    toAddress: Address;\n    amount: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BebopRoute {\n    data: string;\n    approvalTarget: Address;\n    sellAmount: string;\n    from: Address;\n    to: Address;\n    value: string;\n    gas: string;\n    gasPrice: string;\n}\n\nexport interface SwapQuote {\n    aggregator: \"lifi\" | \"bebop\";\n    minOutputAmount: string;\n    swapData: Route | BebopRoute;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\n// Plugin configuration\nexport interface EvmPluginConfig {\n    rpcUrl?: {\n        ethereum?: string;\n        abstract?: string;\n        base?: string;\n        sepolia?: string;\n        bsc?: string;\n        arbitrum?: string;\n        avalanche?: string;\n        polygon?: string;\n        optimism?: string;\n        cronos?: string;\n        gnosis?: string;\n        fantom?: string;\n        fraxtal?: string;\n        klaytn?: string;\n        celo?: string;\n        moonbeam?: string;\n        aurora?: string;\n        harmonyOne?: string;\n        moonriver?: string;\n        arbitrumNova?: string;\n        mantle?: string;\n        linea?: string;\n        scroll?: string;\n        filecoin?: string;\n        taiko?: string;\n        zksync?: string;\n        canto?: string;\n        alienx?: string;\n        gravity?: string;\n    };\n    secrets?: {\n        EVM_PRIVATE_KEY: string;\n    };\n    testMode?: boolean;\n    multicall?: {\n        batchSize?: number;\n        wait?: number;\n    };\n}\n\n// LiFi types\nexport type LiFiStatus = {\n    status: \"PENDING\" | \"DONE\" | \"FAILED\";\n    substatus?: string;\n    error?: Error;\n};\n\nexport type LiFiRoute = {\n    transactionHash: Hash;\n    transactionData: `0x${string}`;\n    toAddress: Address;\n    status: LiFiStatus;\n};\n\n// Provider types\nexport interface TokenData extends Token {\n    symbol: string;\n    decimals: number;\n    address: Address;\n    name: string;\n    logoURI?: string;\n    chainId: number;\n}\n\nexport interface TokenPriceResponse {\n    priceUSD: string;\n    token: TokenData;\n}\n\nexport interface TokenListResponse {\n    tokens: TokenData[];\n}\n\nexport interface ProviderError extends Error {\n    code?: number;\n    data?: unknown;\n}\n\nexport enum VoteType {\n    AGAINST = 0,\n    FOR = 1,\n    ABSTAIN = 2,\n}\n\nexport interface Proposal {\n    targets: Address[];\n    values: bigint[];\n    calldatas: `0x${string}`[];\n    description: string;\n}\n\nexport interface VoteParams {\n    chain: SupportedChain;\n    governor: Address;\n    proposalId: string;\n    support: VoteType;\n}\n\nexport interface QueueProposalParams extends Proposal {\n    chain: SupportedChain;\n    governor: Address;\n}\n\nexport interface ExecuteProposalParams extends Proposal {\n    chain: SupportedChain;\n    governor: Address;\n    proposalId: string;\n}\n\nexport interface ProposeProposalParams extends Proposal {\n    chain: SupportedChain;\n    governor: Address;\n}\n","export * from \"./actions/bridge\";\nexport * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { evmWalletProvider } from \"./providers/wallet\";\n\nexport const evmPlugin: Plugin = {\n    name: \"evm\",\n    description: \"EVM blockchain integration plugin\",\n    providers: [evmWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [transferAction, bridgeAction, swapAction],\n};\n\nexport default evmPlugin;\n"],"mappings":"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","names":["composeContext","generateObjectDeprecated","ModelClass","elizaLogger","createConfig","executeRoute","getRoutes","createConfig","getRoutes","elizaLogger","executeRoute","composeContext","generateObjectDeprecated","ModelClass","parseEther","composeContext","generateObjectDeprecated","ModelClass","parseEther","composeContext","generateObjectDeprecated","ModelClass","viemChains","VoteType"]}